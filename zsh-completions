#compdef poudriere

_poudriere_jail() {
	_values "poudriere jails" ${${(f)"$(poudriere jails -lq)"}%% *}
}

_poudriere_pt() {
	_values "poudriere portstrees" ${${(f)"$(ls /usr/local/poudriere/ports/default/ports/(/))"}%%.*}
}

_poudriere_pt_method() {
	_values "poudriere portstree fetch method" "csup" "portsnap" "svn" "svn+http" "svn+ssh"
}

# shamelessely stolen from
# /usr/local/share/zsh/4.3.12/functions/Completion/BSD/_portmaster
_poudriere_ports() {
  local ret=1 _fbsd_ports _fbsd_cat
   _fbsd_cat=(${PORTSDIR:-/usr/local/poudriere/ports/default/ports}/[a-z]*(/:t))
   if [[ $PREFIX != */* ]] ; then
     _wanted cat_packages expl 'category/ports' compadd -S '/' $_fbsd_cat
   else
     compset -P '*/'
     _fbsd_ports=(${PORTSDIR:-/usr/local/poudriere/ports/default/ports}/$IPREFIX/*(/:t))
     _wanted cat_packages expl 'category/ports' compadd $_fbsd_ports
   fi
  return ret
}

_bulk=(
	'-f[Give the list of ports to build]:name of file:_files'
#Options:
	'-k[Keep the previous built binary packages]::'
	'-t[Add some testings to package building]::'
	'-s[Skip sanity]::'
	'*-j[Run only on the given jail]::jail name:_poudriere_jail'
	'-p[Specify on which ports tree the bulk will be done]::tree:_poudriere_pt'
)

_jail=(
	'-c[create a jail]'
	'-d[delete a jail]'
	'-l[list all available jails]'
	'-s[start a jail]'
	'-k[kill (stop) a jail]'
	'-u[update a jail]'
	'-i[show information about a jail]'
#Options:
	'-q[quiet (remove the header in list)]::'
	'*-j[Specifies the jailname]::jailname:_poudriere_jail'
	'-v[Specifies which version of FreeBSD we want in jail]::version'
	'-a[Indicates architecture of the jail: i386 or amd64(same as host by default)]::arch:(amd64 i386)'
	'-m[Method used to create jail, specify NONE if you want to use your home made jail(ftp by default)]::method:(ftp svn svn+http svn+ssh csup)'
	'-f[FS name (tank/jails/myjail)]::fs:_files -/'
	'-t[version to upgrade to]'
	'-M[mountpoint]::mountpoint:_files -/'
)



_testport=(
	'-d[specify on which port we work]:path:_files -/'
	'-o[specify an origin in the portstree]:origin:_poudriere_ports'
# options
	'-c[run make config for the given port]::'
	'*-j[run only inside the given jail]::name:_poudriere_jail'
	'-n[no custom prefix]::'
	'-p[specify on which portstree we work]::tree:_poudriere_pt'
)

_ports=(
	'-c[create a portstree]'
	'-d[delete a portstree]'
	'-u[update a portstree]'
	'-l[lists all available portstrees]'
	'-q[quiet (remove the header in list)]'
#Options:
	'-F[when used with -c, only create the needed ZFS filesystems and directories, but do not populate them]'
	'-p[specify on which portstree we work]::tree:_poudriere_pt'
	'-f[FS name (tank/jails/myjail)]::fs:_files -/'
	'-M[mountpoint]::mountpoint:_files -/'
	'-m[method]::method:_poudriere_pt_method'
)

_poudriere () {
	local cmds
	local context state line
	typeset -A val_args
	cmds=(
		'bulk:generate packages for given ports'
		'cron:run poudriere from the crontab'
		'jail:manage the jails used by poudriere'
		'ports:create, update or delete the portstrees used by poudriere'
		'queue:queue a build request (through cron)'
		'testport:launch a test on a given port'
		'version:show poudriere version'
	)

	if ((CURRENT == 2)); then
		_describe "poudriere main commands" cmds
	else
		case $words[2] in
			bulk)
			_arguments -s $_bulk "::" && return
			;;
			jail)
			_arguments -s $_jail "::" && return
			;;
			ports)
			_arguments -s $_ports "::" && return
			;;
			testport)
			_arguments -s $_testport "::" && return
			;;
		esac
	fi
}

_poudriere "$@"
